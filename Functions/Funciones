#!/bin/bash

function SeleccionarHistorico() {
    fichero=$1

    if [ -e $fichero ]; then
        HISTFILE=$fichero

        export HISTFILE
    fi
}

function ElegirHistorico() {
    dir=`ls ~/.History/Histories | zenity --list --column "Seleccione Directorio"`
    if [ $dir != "" ]; then
        hist=`ls ~/.History/Histories/${dir} | zenity --list --column "Seleccione Histórico"`
    else
        zenity --info --text="Operación cancelada."
        . ${HOME}/.History/Scripts/exec
    fi
}

function Importar() {
    rutaorigen=$1
    ficherooriginal=$(basename "$rutaorigen")
    fichero=$ficherooriginal
    rutadestino="${HOME}/.History/Histories/Custom/${fichero}"

    if [ -e $rutaorigen ]; then
        let count=0
        while [ -e $rutadestino ]
        do
            let count=${count}+1
            fichero=${ficherooriginal}"${count}"
            rutadestino="${HOME}/.History/Histories/Custom/${fichero}"
        done
        cp $rutaorigen $rutadestino
        if [ $? -eq 0 ]; then
            resultado="Fichero importado al directorio Custom con el nombre: ${fichero}"
        else
            resultado='Algo salio mal y no se pudo realizar la importación'
        fi
    fi
}

function Exportar() {
    dir=$1
    hist=$2
    rutaorigen="${HOME}/.History/Histories/${dir}/${hist}"
    ficherooriginal=$(basename "$rutaorigen")
    fichero=$ficherooriginal
    dirdestino=`zenity --file-selection --directory --filename=${HOME}/ --title="Seleccione Directorio de destino"`
    rutadestino="${dirdestino}/${fichero}"

    if [ -e $rutaorigen ]; then
        let count=0
        while [ -e $rutadestino ]
        do
            let count=${count}+1
            fichero=${ficherooriginal}"${count}"
            rutadestino="${dirdestino}/${fichero}"
        done
        cp $rutaorigen $rutadestino
        if [ $? -eq 0 ]; then
            resultado="Histórico exportado al directorio ${dirdestino} con el nombre: ${fichero}"
        else
            resultado='Algo salio mal y no se pudo realizar la exportación'
        fi
    fi
}

function UsodeOrdenes(){
    declare -A reg
    count=1
    long=$(wc -l $1 | cut -d' ' -f1)

    while [ $count -le $long ]; do #Introducir o actualizar ordenes
        check=false
        linea=$(awk "NR==$count" $1 | cut -d' ' -f1)

        for registro in "${!reg[@]}"; do #Comprar si la linea actual ya esta en el array !:Clave del registro
            if [[ $registro == $linea ]]; then
                check=true
            fi
        done

        if [ $check == true ]; then #Si la linea existe en el registro sumara uno al valor, sino lo introducira como un nuevo registro
            let reg["${linea}"]="${reg[$linea]}"+1
        else
            let reg["${linea}"]=1
        fi

        let count=${count}+1
    done

    for i in "${!reg[@]}"; do #Imprimir registro de mayor a menor separando valor y clave con ":"
    
        printf '%s:%s\n' "$i" "${reg[$i]}"
    done | sort -t : -k 2nr > ${HOME}/.History/list.temp #Lo guardamos en un archivo temporal para tratarlo despues

    declare -A grupos
    while read line; do #Poner todas las ordenes con el mismo valor en una linea
        orden=$(echo "$line" | cut -d':' -f1)
        numero=$(echo "$line" | cut -d':' -f2)

        if [[ $numero == $old ]]; then #Tratar la orden y su valor y meterla en un array.     
            oldord="$oldord $orden"
            grupos["${numero}"]="$oldord"
        else
            old=${numero}
            oldord=${orden}
            grupos["${numero}"]="$oldord"
        fi
    done < ${HOME}/.History/list.temp

    for i in "${!grupos[@]}"; do #Preparar la impresion por pantalla del uso de las ordenes
        let n=$i
        let count=0
        bar=""

        while [ $count -lt $n ]; #Añadir tantas "|" como veces aparezca la orden
        do
            bar="${bar}|"
            let count=$count+1
        done

        echo "$i ${grupos[$i]}: $bar"
    done | sort -k 1nr

    rm ${HOME}/.History/list.temp
}

#Borrar archivo temporal
#| sort -t : -k 1nr