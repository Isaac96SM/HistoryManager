#!/bin/bash 

#Isaac
#Cambia el histórico del sistema
function SeleccionarHistorico() {
    fichero=$1

    if [ -e $fichero ]; then
        #Cambiamos la variable de sistema
        HISTFILE=$fichero
        #Hay que ejecutar un exit desde la terminal antes de guardar el histórico (temporal)
        if [ $? == 0 ]; then
            result=true
        else
            result=false
        fi
    fi
}

#Sebastián
#Permite seleccionar un histórico
function ElegirHistorico() {
    #Selección del directorio
    dir=`ls ~/.History/Histories | zenity --list --column "Seleccione Directorio"`
    if [ $dir != "" ]; then
        #Selección del histórico
        hist=`ls ${HOME}/.History/Histories/${dir} | zenity --list --column "Seleccione Histórico"`
    else
        zenity --info --text="Operación cancelada."
        . ${HOME}/.History/Scripts/exec
    fi
}

#Isaac
#Copia un histórico en una ubicacion comprobando que ese fichero no exista previamente
#añadiendo un sufijo siendo necesario 
function GuardarSinRepetir() {
    rutaorigen=$1
    rutadestino=$2
    dir=$(dirname "$rutadestino")
    ficherooriginal=$3
    let count=0
    #Añade un sufijo numerico al nombre hasta que este nombre no exista en el destino 
    while [ -e $rutadestino ]
    do
        let count=${count}+1
        fichero=${ficherooriginal}"${count}"
        rutadestino="${dir}/${fichero}"
    done
    #Creacion del nuevo fichero
    cp $rutaorigen $rutadestino
    if [ $? -eq 0 ]; then
        exito=true
    else
        exito=false
    fi
}

#Josué
#Crea un nuevoo histórico temporal y lo establece como activo
function NuevoHistorico(){
    #Crea el temporal
    touch ${HOME}/.History/Temp/aux.temp
    SeleccionarHistorico ${HOME}/.History/Temp/aux.temp
    #Hay que ejecutar un exit desde la terminal antes de guardar el histórico (temporal)

}

#Josué
#Guarda el histórico temporal como uno permanente
function GuardarHistorico(){

    #Comprueba si ya hay un historico guardado con el mismo nmbre
    if [ -e ${HOME}/.History/Histories/Dates/`date +%Y_%m_%d` ];then
        #Actualiza el ya existente con los camios de ela sesion actual 
        cat ${HOME}/.History/Temp/aux.temp>>${HOME}/.History/Histories/Dates/`date +%Y_%m_%d` 
        rm ${HOME}/.History/Temp/aux.temp 
        zenity --info --text "Historico Actualizado!"  
    else 
        zenity --question --text "Guardar?" 
        if [ $? = 0 ];then
            #Guardamos el nuevo histórico
            mv ${HOME}/.History/Temp/aux.temp ${HOME}/.History/Histories/Dates/`date +%Y_%m_%d` 
            SeleccionarHistorico ${HOME}/.History/Histories/Dates/`date +%Y_%m_%d` 
            zenity --info --text="Historico guardado." 
        else  
            rm ${HOME}/.History/Temp/aux.temp 
            zenity --info --text="Historico descartado." 
        fi 
fi     
}

#Josué
#Permite seleccionar diversos históricos de diversas ubicaciones
function ElegirHistoricos(){
#Creamos un array asociativo que contenga para cada directorio seleccionado, una lista con los ficheros selecionados a borrar
    dir=`ls ~/.History/Histories | awk '{print "FALSE\n"$0}' | zenity --list --checklist --column="Acceder?" --column="Directorios" --separator=" "`
    declare -A arrayHistoricos
    set $dir

    #Iteración de los directorios seleccionados
    while [ "$1" != "" ]
    do  
        #Selección de los históricos del directorio
        hist=`ls ~/.History/Histories/${1} | awk '{print "FALSE\n"$0}' | zenity --list --checklist --column="Seleccionar?" --column="Históricos" --separator=" "`
        arrayHistoricos[$1]="$hist"
        let count=count+1
        shift
    done
    #Comprobamos que ha ido bien la seleccion de ficheros
    if [ $? = 0 ]; then
        result=true
    else
        result=false
    fi
    
    declare -a array
    #Conversión de array asociativa a array indexada
    for i in "${!arrayHistoricos[@]}";
    do  
        split=`echo "${arrayHistoricos[$i]}" | tr ' ' ':'`
        string=`echo "${i};$split"`
        array+=("$string") 
    done
    echo "${array[@]}"
}

#Josué
#Funcion que permite elegir varios historicos de diferentes directorios y eliminarlos a la vez 
function EliminarHistoricos() {
    #COnversión de array indexada a asociativa
    declare -a aux=$(ElegirHistoricos)
    declare -A arrayBuena

    for linea in ${aux[@]};
    do
        IFS=';' read -ra PAR <<< "$linea"
        clave="${PAR[0]}"
        valor="${PAR[1]}"
        arrayBuena["${clave}"]="${valor}"
    done

    #Bucle para borrar la lista de ficheros que hemos definido de cada directorio
    for index in "${!arrayBuena[@]}"
    do
        directorio=$index
        split=`echo "${arrayBuena[$index]}" | tr ':' ' '`
        ficheros="$split" 
        set $ficheros
            #Iteración de ficheros del directorio
            while [ "$1" != "" ]
            do  
                if [ -e ${HOME}/.History/Histories/${directorio}/${1} ];then
                    rm ${HOME}/.History/Histories/${directorio}/${1}
                fi
                shift
            done    
    done

} 

#Sebastián
#Crea un histórico nuevo con el contenido de todos lo ficheros seleccionados
function FusionarHistoricos(){
    #Seleccion de Historicos
    declare -a aux=$(ElegirHistoricos)
    declare -A arrayBuena

    for linea in ${aux[@]};
    do
        IFS=';' read -ra PAR <<< "$linea"
        clave="${PAR[0]}"
        valor="${PAR[1]}"
        arrayBuena["${clave}"]="${valor}"
    done
    #Establecemos nombre al fichero
    nombrehistorico=`date +%Y_%m_%d`".fusion" 
    #Bucle para fusionar los historicos que hemos definido de cada directorio
    #Comprobar si ya existe la fusion 
    if [ -e ${HOME}/.History/Histories/Custom/$nombrehistorico ]; then
        zenity --question --text "Ya existe una fusión, desea añadir el contenido nuevo como un fichero distinto?"
        if [ $? == 0 ]; then
            nombrehistorico=$(zenity --entry --title="Establecer nombre" --text="Indique el nombre que desea:") 
            count=0
            #Comprobamos que el nombre personalizado existe
            while [ -e ${HOME}/.History/Histories/Custom/$nombrehistorico ]
            do
                let count=${count}+1
                nombrehistorico=${nombrehistorico}"${count}"    
            done
        fi
    fi
    for index in "${!arrayBuena[@]}"
    do
        directorio=$index
        ficheros="${arrayBuena[$index]}"
        result=true
        set $ficheros
        while [ $1 != "" ]
        do
            #Añadimos con adición los históricos resultantes en la fusión
            cat ${HOME}/.History/Histories/${directorio}/${1} >> "${HOME}/.History/Histories/Custom/$nombrehistorico"
            if [ $? != 0 ]; then
                result=false
            fi
            shift
        done    
    done
    #Comprobamos si la extensión de la fusión supera el $HISTSIZE 
    lineastotales=`wc -l ${HOME}/.History/Histories/Custom/$nombrehistorico | cut -d' ' -f1`
    if [ lineastotales -gt $HISTSIZE ]; then
        zenity --error --text="El histórico resultante superó el limite máximo de longitud"
    fi

}

#Sebastián
#Muestra el porcentaje que aparece una orden en un histórico
function PorcentajeOrden(){
    #Numero de lineas que aparece la orrden
    numderepeticiones=`fgrep -o "$1" ${HOME}/.History/Histories/$dir/$hist | wc -l`
    #Lineas del Script
    lineastotales=`wc -l ${HOME}/.History/Histories/$dir/$hist | cut -d' ' -f1`
    let multiplicacion=$numderepeticiones\*100
    porcentajetotal=$(echo "scale=2; ${multiplicacion}/${lineastotales}" | bc)
    resultado="El porcentaje de veces que se repite la orden ${1} es: ${porcentajetotal}%"

}

#Isaac
#Funcion para Importar un fichero ajeno como nuevo histórico
function Importar() {
    rutaorigen=$1
    ficherooriginal=$(basename "$rutaorigen")
    fichero=$ficherooriginal
    rutadestino="${HOME}/.History/Histories/Custom/${fichero}"

    #Comprueba la existencia del origen
    if [ -e $rutaorigen ]; then
        GuardarSinRepetir $rutaorigen $rutadestino $ficherooriginal
        if [ $exito == true ]; then
            resultado="Fichero importado al directorio ${dir} con el nombre: ${fichero}"
        else
            resultado='Algo salio mal y no se pudo realizar la importación'
        fi
    fi
}

#Isaac
#Exporta un historico a una ubicacion ajena a la utilidad
function Exportar() {
    dir=$1
    hist=$2
    rutaorigen="${HOME}/.History/Histories/${dir}/${hist}"
    ficherooriginal=$(basename "$rutaorigen")
    fichero=$ficherooriginal
    dirdestino=`zenity --file-selection --directory --filename=${HOME}/ --title="Seleccione Directorio de destino"`
    rutadestino="${dirdestino}/${fichero}"

    #Comprueba la existencia del origen
    if [ -e $rutaorigen ]; then
        GuardarSinRepetir $rutaorigen $rutadestino $ficherooriginal
        if [ $exito == true ]; then
            resultado="Histórico exportado al directorio ${dir} con el nombre: ${fichero}"
        else
            resultado='Algo salio mal y no se pudo realizar la exportación'
        fi
    fi
}

#Francisco
#Muestra una gráfica que indica las repeticiones de aparación (5 diferentes) de las órdenes de un Histórico
#Varias ordenes con el mismo numero de repeticiones son mostradas en la misma linea 
function UsodeOrdenes(){
    declare -A reg
    count=1
    long=$(wc -l $1 | cut -d' ' -f1)

    while [ $count -le $long ]; do #Introducir o actualizar ordenes
        check=false
        linea=$(awk "NR==$count" $1 | cut -d' ' -f1)

        for registro in "${!reg[@]}"; do #Comprar si la linea actual ya esta en el array !:Clave del registro
            if [[ $registro == $linea ]]; then
                check=true
            fi
        done

        if [ $check == true ]; then #Si la linea existe en el registro sumara uno al valor, sino lo introducira como un nuevo registro
            let reg["${linea}"]="${reg[$linea]}"+1
        else
            let reg["${linea}"]=1
        fi

        let count=${count}+1
    done

    for i in "${!reg[@]}"; do #Imprimir registro de mayor a menor separando valor y clave con ":"
    
        printf '%s:%s\n' "$i" "${reg[$i]}"
    done | sort -t : -k 2nr > ${HOME}/.History/list.temp #Lo guardamos en un archivo temporal para tratarlo despues

    declare -A grupos
    while read line; do #Poner todas las ordenes con el mismo valor en una linea
        orden=$(echo "$line" | cut -d':' -f1)
        numero=$(echo "$line" | cut -d':' -f2)

        if [[ $numero == $old ]]; then #Tratar la orden y su valor y meterla en un array.     
            oldord="$oldord $orden"
            grupos["${numero}"]="$oldord"
        else
            old=${numero}
            oldord=${orden}
            grupos["${numero}"]="$oldord"
        fi
    done < ${HOME}/.History/list.temp

    for i in "${!grupos[@]}"; do #Preparar la impresion por pantalla del uso de las ordenes
        let n=$i
        let count=0
        bar=""

        while [ $count -lt $n ]; #Añadir tantas "|" como veces aparezca la orden
        do
            bar="${bar}|"
            let count=$count+1
        done

        echo "$i ${grupos[$i]}: $bar" >> ${HOME}/.History/result.temp
    done | sort -k 1nr
    zenity --text-info \
    --title="Uso de Ordenes" \
    --filename=${HOME}/.History/result.temp \

    rm ${HOME}/.History/list.temp
    rm ${HOME}/.History/result.temp
}

#Isaac
#Filtra histórico por orden, lo muestra y lo guarda si se desea
function DesglosarHistorico() {
    dir=$1
    hist=$2
    orden=$3
    ruta="${HOME}/.History/Histories/${dir}/${hist}"
    #Guardamos en un temporal las lineas de la orden seleccionada
    cat $ruta | grep "${orden}" > ${HOME}/.History/Temp/desglose.temp
    vacio=false
    contador=$(wc -l ${HOME}/.History/Temp/desglose.temp | cut -d' ' -f1)
    if zenity --text-info \
    --title="Desglose de ${contador} lineas" \
    --filename=${HOME}/.History/Temp/desglose.temp \
    --checkbox="Guardar como historico."
    then
        #Meter logica de guardar el temporal como "date.orden" en el directorio Command
        rutaorigen="${HOME}/.History/Temp/desglose.temp"
        ficherooriginal=`date +%Y_%m_%d`".${orden}"
        fichero=$ficherooriginal
        rutadestino="${HOME}/.History/Histories/Command/${ficherooriginal}"
        #Comprueba la existencia del origen
        if [ -e $rutaorigen ]; then
            GuardarSinRepetir $rutaorigen $rutadestino $ficherooriginal
            if [ $exito == true ]; then
                resultado="Histórico guardado al directorio ${dir} con el nombre: ${fichero}"
                rm $rutaorigen
            else
                resultado='Algo salio mal y no se pudo realizar la exportación'
            fi
        fi  
    else
        resultado="Histórico no guadado"
    fi
}